{
"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
"contentVersion": "1.0.0.0",
"parameters": {
    "ManagedIDName": {
      "type": "string",
      "metadata": {
        "description": "Managed ID Name"
      }
    },
    "KeyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Managed ID Name"
      }
    },    
    "VMName": {
      "type": "string",
      "metadata": {
        "description": "VM Name"
      }
    },
    "ResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "ResourceGroupName"
      }
    }     
},
"variables": {
    "DESName": "[concat(parameters('KeyVaultName'),'-DES')]"
},
"resources": [
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2019-10-01-preview",
      "name": "encryptvms",
      "location": "[resourceGroup().location]",
      "kind": "AzurePowerShell",      
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('ManagedIDName'))]": {
          }
        }
      },
      "properties": {
        "azPowerShellVersion": "3.0",
        "timeout": "PT1H",
        "arguments": "[format(' -DESName {0} -VMName {1} -ResourceGroupName {2}', variables('DESName'), parameters('VMName'), parameters('ResourceGroupName'))]", // can pass an argument string, double quotes must be escaped
        "scriptContent": "
          param(
          [string] [Parameter(Mandatory=$true)] $DESName,
          [string] [Parameter(Mandatory=$true)] $VMName,          
          [string] [Parameter(Mandatory=$true)] $ResourceGroupName
          )

          $des = Get-AzDiskEncryptionSet -Name $DESName -ResourceGroupName $ResourceGroupName
          $vm = Get-AzVM -Name $VMName -ResourceGroupName $ResourceGroupName
          $OSDisk = Get-AzDisk -name $vm.StorageProfile.OsDisk.Name
          $DataDisk = Get-AzDisk -name $vm.StorageProfile.DataDisks[0].Name
          Stop-AzVm -Name $VMName -ResourceGroupName $ResourceGroupName -Force
          New-AzDiskUpdateConfig -EncryptionType 'EncryptionAtRestWithCustomerKey' -DiskEncryptionSetId $DES.Id | Update-AzDisk -ResourceGroupName $ResourceGroupName -DiskName $OSDisk.Name
          IF ($DataDisk -ne $Null) {New-AzDiskUpdateConfig -EncryptionType 'EncryptionAtRestWithCustomerKey' -DiskEncryptionSetId $DES.Id | Update-AzDisk -ResourceGroupName $ResourceGroupName -DiskName $DataDisk.Name}
          Start-AzVm -Name $VMName -ResourceGroupName $ResourceGroupName
        ",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D"
      }
    }
  ]
}